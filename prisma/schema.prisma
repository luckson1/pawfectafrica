// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}


// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String     @id @default(cuid())
    name          String?
    email         String?    @unique
    emailVerified DateTime?
    image         String?
    phoneNumber   String?
    currentPet    CurrentPet @default(NONE)

    role Role @default(USER)

    accounts Account[]
    sessions Session[]

    Image      Image[]
    Pet        Pet[]
    Preference Preference[]
    Favorite   Favorite[]
    Adoption   Adoption[]
}

enum CurrentPet {
    NONE
    CAT
    DOG
    BIRD
}

enum Role {
    USER
    ADMIN
    DONOR
}

model Preference {
    id       String  @id @default(cuid())
    user     User    @relation(fields: [userId], references: [id])
    userId   String
    breed    String?
    ageRange String
    gender   String
    type     String
    children Boolean
    garden   Boolean
    active   Boolean
}

model Favorite {
    id     String @id @default(cuid())
    user   User   @relation(fields: [userId], references: [id])
    userId String
    pet    Pet    @relation(fields: [petId], references: [id])
    petId  String
}

model Adoption {
    id     String @id @default(cuid())
    user   User   @relation(fields: [userId], references: [id])
    userId String
    pet    Pet    @relation(fields: [petId], references: [id])
    petId  String
}

model Pet {
    id            String  @id @default(cuid())
    name          String
    description   String
    Image         Image[]
    breed         String?
    ageRange      String
    gender        String
    type          String
    children      Boolean
    garden        Boolean
    active        Boolean
    adopted       Boolean @default(false)
    neutered      Boolean
    deleted       Boolean @default(false)
    petTorrelance String

    donor        User           @relation(fields: [userId], references: [id])
    userId       String
    Vaccinations Vaccinations[]
    Favorite     Favorite[]
    Adoption     Adoption[]
}

model Vaccinations {
    id          String   @id @default(cuid())
    rabies      Boolean
    others      String?
    nextVaxDate DateTime
    pet         Pet      @relation(fields: [petId], references: [id])

    petId String
}

model Image {
    id      String  @id @default(cuid())
    petId   String
    userId  String
    deleted Boolean @default(false)
    Pet     Pet     @relation(fields: [petId], references: [id])
    user    User    @relation(fields: [userId], references: [id])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
